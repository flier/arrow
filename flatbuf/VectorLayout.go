// automatically generated by the FlatBuffers compiler, do not modify

package flatbuf

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// ----------------------------------------------------------------------
/// represents the physical layout of a buffer
/// buffers have fixed width slots of a given type
type VectorLayout struct {
	_tab flatbuffers.Table
}

func GetRootAsVectorLayout(buf []byte, offset flatbuffers.UOffsetT) *VectorLayout {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &VectorLayout{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *VectorLayout) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

/// the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)
func (rcv *VectorLayout) BitWidth() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

/// the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)
func (rcv *VectorLayout) MutateBitWidth(n int16) bool {
	return rcv._tab.MutateInt16Slot(4, n)
}

/// the purpose of the vector
func (rcv *VectorLayout) Type() int16 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt16(o + rcv._tab.Pos)
	}
	return 0
}

/// the purpose of the vector
func (rcv *VectorLayout) MutateType(n int16) bool {
	return rcv._tab.MutateInt16Slot(6, n)
}

func VectorLayoutStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func VectorLayoutAddBitWidth(builder *flatbuffers.Builder, bitWidth int16) {
	builder.PrependInt16Slot(0, bitWidth, 0)
}
func VectorLayoutAddType(builder *flatbuffers.Builder, type_ int16) {
	builder.PrependInt16Slot(1, type_, 0)
}
func VectorLayoutEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
